// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RookSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreData
import CoreLocation
import Foundation
import HealthKit
@_exported import RookSDK
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct RookLapGranularItem : Swift.Encodable {
  public let datetime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let laps: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
final public class DataSourcesManager {
  public init()
  @available(*, deprecated, message: "This method is deprecated and it will be removed in a future version")
  final public func getAvailableDataSources(redirectURL: Swift.String?, completion: @escaping (Swift.Result<[RookSDK.RookDataSource], any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method is deprecated and it will be removed in a future version")
  final public func presentDataSourceView(redirectURL: Swift.String?, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getAuthorizedDataSources(completion: @escaping (Swift.Result<RookSDK.StatusDataSources, any Swift.Error>) -> Swift.Void)
  final public func getAuthorizedSources(completion: @escaping (Swift.Result<[RookSDK.DataSourceStatus], any Swift.Error>) -> Swift.Void)
  final public func getDataSourceAuthorizer(dataSource: Swift.String, redirectUrl: Swift.String? = nil, completion: @escaping (Swift.Result<RookSDK.DataSourceAuthorizer, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method is deprecated and it will be removed in a future version")
  final public func getAvailableDataSources(redirectURL: Swift.String?) async throws -> [RookSDK.RookDataSource]
  @available(*, deprecated, message: "This method is deprecated and it will be removed in a future version")
  final public func presentDataSourceView(redirectURL: Swift.String?) async throws -> Swift.Bool
  final public func getAuthorizedDataSources() async throws -> RookSDK.StatusDataSources
  final public func getAuthorizedDataSources() async throws -> [RookSDK.DataSourceStatus]
  final public func getDataSourceAuthorizer(dataSource: Swift.String, redirectUrl: Swift.String? = nil) async throws -> RookSDK.DataSourceAuthorizer
  final public func updateAppleHealthStatus(_ status: Swift.Bool) async throws -> Swift.Bool
  @objc deinit
}
final public class RookTimeZoneManager {
  public init()
  final public func uploadUserTimeZone(timezone: Swift.String, offset: Swift.Int, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum RookDataType : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: RookSDK.RookDataType {
    get
  }
  case sleepSummary
  case physicalSummary
  case bodySummary
  case userInformation
  case heartRateBodyEvent
  case heartRatePhysicalEvent
  case oxygenationBodyEvent
  case oxygenationPhysicalEvent
  case activityEvent
  case temperatureEvent
  case bloodGlucoseEvent
  case nutritionEvent
  case bloodPressureEvent
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RookSDK.RookDataType]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = RookSDK.RookDataType
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RookSDK.RookDataType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum RookContextType {
  case viewContext
  case backGroundContext
  public static func == (a: RookSDK.RookContextType, b: RookSDK.RookContextType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class RookEventsManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func syncEvents(completion: @escaping () -> Swift.Void)
  final public func syncEvents(date: Foundation.Date, eventType: RookSDK.EventTypeToUpload, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getActivityEvents(date: Foundation.Date, completion: @escaping (Swift.Result<[RookSDK.RookActivityEvent], any Swift.Error>) -> Swift.Void)
  final public func getTodayStepCount(completion: @escaping (Swift.Result<Swift.Int, any Swift.Error>) -> Swift.Void)
  final public func getTodayCalories(completion: @escaping (Swift.Result<RookSDK.RookCalories, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBodyHeartRateEvent(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncPhysicalHeartRateEvent(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBodyOxygenationEvent(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncPhysicalOxygenationEvent(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncTrainingEvent(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncTemperatureEvents(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBloodPressureEvents(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBloodGlucoseEvents(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBodyMetricsEvents(date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func syncPendingEvents(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getPendingDates(of type: RookSDK.PendingDatesToUploadTypes) -> [Foundation.Date]
  final public func getLastTransmissionDate(of type: RookSDK.RookTransmissionEventType) -> Foundation.Date?
  @objc deinit
}
public enum NetworkResponse : Swift.String {
  case success
  case authenticationError
  case badRequest
  case outdated
  case failed
  case noData
  case unableToDecode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ElectrocardiogramSample {
  public let startDate: Foundation.Date
  public let endDate: Foundation.Date
  public let numberOfVoltageMeasurements: Swift.Int
  public let samplingFrequency: Swift.Int
  public let averageHeartRate: Swift.Int
  public var measurements: [RookSDK.VoltageECGMeasurement]
}
public struct VoltageECGMeasurement {
  public let timeSinceSampleStart: Foundation.TimeInterval
  public let value: Swift.Double
}
public struct RookPhysicalSummary : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let physicalHealthScore: Swift.Int?
  public let stepsPerDayNumber: Swift.Int?
  public let stepsGranularDataStepsPerHr: [RookSDK.RookStepsGranular]?
  public let activeStepsPerDayNumber: Swift.Int?
  public let activeStepsGranularDataStepsPerHr: [RookSDK.RookStepsGranular]?
  public let walkedDistanceMeters: Swift.Int?
  public let traveledDistanceMeters: Swift.Int?
  public let traveledDistanceGranularDataMeters: [RookSDK.RookTraveledDistanceGranular]?
  public let floorsClimbedNumber: Swift.Int?
  public let floorsClimbedGranularDataFloors: [RookSDK.RookFloorsClimbedGranular]?
  public let elevationAvgAltitudeMeters: Swift.Int?
  public let elevationMinimumAltitudeMeters: Swift.Int?
  public let elevationMaxAltitudeMeters: Swift.Int?
  public let elevationLossActualAltitudeMeters: Swift.Int?
  public let elevationGainActualAltitudeMeters: Swift.Int?
  public let elevationPlannedGainMeters: Swift.Int?
  public let elevationGranularDataMeters: [RookSDK.RookElevationGranular]?
  public let swimmingStrokesNumber: Swift.Int?
  public let swimmingNumLapsNumber: Swift.Int?
  public let swimmingPoolLengthMeters: Swift.Int?
  public let swimmingTotalDistanceMeters: Swift.Int?
  public let swimmingDistanceGranularDataMeters: [RookSDK.RookSwimmingDistanceGranular]?
  public let saturationAvgPercentage: Swift.Int?
  public let saturationGranularDataPercentage: [RookSDK.RookSaturationGranular]?
  public let vo2MaxMlPerMinPerKg: Swift.Int?
  public let vo2GranularDataLiterPerMin: [RookSDK.RookVo2Granular]?
  public let activeSeconds: Swift.Int?
  public let restSeconds: Swift.Int?
  public let lowIntensitySeconds: Swift.Int?
  public let moderateIntensitySeconds: Swift.Int?
  public let vigorousIntensitySeconds: Swift.Int?
  public let inactivitySeconds: Swift.Int?
  public let continuousInactivePeriodsNumber: Swift.Int?
  public let activityLevelGranularDataNumber: [RookSDK.RookActivityLevelGranularData]?
  public let caloriesNetIntakeKilocalories: Swift.Int?
  public let caloriesExpenditureKilocalories: Swift.Int?
  public let caloriesNetActiveKilocalories: Swift.Int?
  public let caloriesBasalMetabolicRateKilocalories: Swift.Int?
  public let hrMaxBPM: Swift.Int?
  public let hrMinimumBPM: Swift.Int?
  public let hrAvgBPM: Swift.Int?
  public let hrRestingBPM: Swift.Int?
  public let hrGranularDataBPM: [RookSDK.RookHearRateGranular]?
  public let hrvAvgRmssdNumber: Swift.Int?
  public let hrvAvgSdnnNumber: Swift.Int?
  public let hrvSdnnGranularDataNumber: [RookSDK.RookHRVSDNNGranular]?
  public let hrvRmssdGranularDataNumber: [RookSDK.RookHRVRmssdGranular]?
  public let stressAtRESTDurationSeconds: Swift.Int?
  public let stressDurationSeconds: Swift.Int?
  public let lowStressDurationSeconds: Swift.Int?
  public let mediumStressDurationSeconds: Swift.Int?
  public let highStressDurationSeconds: Swift.Int?
  public let stressGranularDataScoreNumber: [RookSDK.RookStressGranular]?
  public let stressAvgLevelNumber: Swift.Int?
  public let stressMaxLevelNumber: Swift.Int?
  public let walkingSpeed: Swift.Int?
  public let walkingStepLength: Swift.Int?
  public let runningPower: Swift.Int?
  public let runningSpeed: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookStepsGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let steps: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookTraveledDistanceGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let traveledDistanceMeters: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookFloorsClimbedGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let floorsClimbed: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookElevationGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let elevationChange: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookSwimmingDistanceGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let swimmingDistanceMeters: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookVo2Granular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let vo2MlPerMinPerKg: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookActivityLevelGranularData : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let activityLevel: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookStressGranular : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class RookConnectConfigurationManager {
  public static let shared: RookSDK.RookConnectConfigurationManager
  @objc deinit
  final public func setConfiguration(clientUUID: Swift.String, secretKey: Swift.String, enableBackgroundSync: Swift.Bool, enableEventsBackgroundSync: Swift.Bool)
  final public func setEnvironment(_ environment: RookSDK.RookEnvironment)
  final public func getEnvironment() -> RookSDK.RookEnvironment
  final public func initRook()
  final public func initRook(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func updateUserId(_ id: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getUserId(completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  final public func clearUser(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func removeUserFromRook(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func syncUserTimeZone(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func enableSync()
  final public func disableSync()
  final public func isSyncEnable() -> Swift.Bool
  final public func setExcludeManualData(_ excludeManual: Swift.Bool)
  @objc final public func setConsoleLogAvailable(_ value: Swift.Bool)
  @objc final public func isHealthDataAvailable() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc final public class UserManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  final public func updateUserId(_ id: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getUserId(completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  final public func clearUser(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func removeUserFromRook(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func syncUserTimeZone(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func revokeDataSource(dataSource: RookSDK.DataSourceRevoke, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func revokeDataSource(dataSource: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func revoke(dataSource: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func updateUserId(_ id: Swift.String) async throws -> Swift.Bool
  final public func getUserId() async throws -> Swift.String
  final public func clearUser() async throws -> Swift.Bool
  final public func removeUserFromRook() async throws -> Swift.Bool
  final public func syncUserTimeZone() async throws -> Swift.Bool
  final public func revokeDataSource(dataSource: RookSDK.DataSourceRevoke) async throws -> Swift.Bool
  final public func revokeDataSource(dataSource: Swift.String) async throws -> Swift.Bool
  @objc final public func revoke(dataSource: Swift.String) async throws -> Swift.Bool
  @objc final public func updateUserId(_ id: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func readUserId(completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func clearUser(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func removeUserFromRook(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func syncUserTimeZone(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func revokeDataSource(dataSource: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public struct JSONParameterEncoder : RookSDK.ParameterEncoder {
  public static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookSDK.Parameters) throws
}
public struct RookTemperatureTransmissionDTO : Swift.Codable {
  public let temperatureCelsius: Swift.Int
  public let measurementType: Swift.String
  public init(temperatureCelsius: Swift.Int, measurementType: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookPositionItem : Swift.Encodable {
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum RookTransmissionError : Swift.String, Swift.Error {
  case emptyUserId
  case rookTransmissionIsNotAvailable
  case invalidEventData
  case registerNotFound
  case datetimeNil
  case clientUUIDEmpty
  case emptyData
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension RookSDK.RookTransmissionError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoder {
  static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookSDK.Parameters) throws
}
public enum NetworkError : Swift.Error, Swift.Equatable {
  case parametersNil
  case encodingFailed
  case missingUrl
  case noData
  case NotAuthorizedError
  case URLResponseError
  case apiError(error: Swift.String, httpCode: Swift.Int)
  public static func == (a: RookSDK.NetworkError, b: RookSDK.NetworkError) -> Swift.Bool
}
extension RookSDK.NetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct RookBodySummary : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let bodyHealthScore: Swift.Int?
  public let waistCircumferenceCMNumber: Swift.Int?
  public let hipCircumferenceCMNumber: Swift.Int?
  public let chestCircumferenceCMNumber: Swift.Int?
  public let boneCompositionPercentageNumber: Swift.Int?
  public let muscleCompositionPercentageNumber: Swift.Int?
  public let waterCompositionPercentageNumber: Swift.Int?
  public let weightKgNumber: Swift.Float?
  public let heightCMNumber: Swift.Float?
  public let bmiNumber: Swift.Float?
  public let bloodGlucoseDayAvgMgPerDLNumber: Swift.Int?
  public let bloodGlucoseGranularDataMgPerDL: [RookSDK.RookBloodGlucoseGranular]?
  public let bloodPressureDayAvgSystolicDiastolicBpNumber: [RookSDK.RookBloodPressureSystolicDiastolic]?
  public let bloodPressureGranularDataSystolicDiastolicBpNumber: [RookSDK.RookBloodPressureGranularSystolicDiastolicBp]?
  public let waterTotalConsumptionMlNumber: Swift.Int?
  public let hydrationAmountGranularDataMlNumber: [RookSDK.RookHydrationAmountGranular]?
  public let hydrationLevelGranularDataPercentageNumber: [RookSDK.RookHydrationLevelGranular]?
  public let hrMaxBPM: Swift.Int?
  public let hrMinimumBPM: Swift.Int?
  public let hrAvgBPM: Swift.Int?
  public let hrRestingBPM: Swift.Int?
  public let hrGranularDataBPM: [RookSDK.RookHearRateGranular]?
  public let hrvAvgRmssdNumber: Swift.Int?
  public let hrvAvgSdnnNumber: Swift.Int?
  public let hrvSdnnGranularDataNumber: [RookSDK.RookHRVSDNNGranular]?
  public let hrvRmssdGranularDataNumber: [RookSDK.RookHRVRmssdGranular]?
  public let moodMinimumScale: Swift.Int?
  public let moodAvgScale: Swift.Int?
  public let moodGranularDataScale: [RookSDK.RookMoodGranular]?
  public let moodMaxScale: Swift.Int?
  public let moodDeltaScale: Swift.Int?
  public let foodIntakeNumber: Swift.Int?
  public let caloriesIntakeNumber: Swift.Int?
  public let proteinIntakeGNumber: Swift.Int?
  public let sugarIntakeGNumber: Swift.Int?
  public let fatIntakeGNumber: Swift.Int?
  public let transFatIntakeGNumber: Swift.Int?
  public let carbohydratesIntakeGNumber: Swift.Int?
  public let fiberIntakeGNumber: Swift.Int?
  public let alcoholIntakeGNumber: Swift.Int?
  public let sodiumIntakeMgNumber: Swift.Int?
  public let cholesterolIntakeMgNumber: Swift.Int?
  public let saturationAvgPercentage: Swift.Int?
  public let saturationGranularDataPercentage: [RookSDK.RookSaturationGranular]?
  public let vo2MaxMlPerMinPerKg: Swift.Int?
  public let vo2GranularDataLiterPerMin: [RookSDK.RookVo2Granular]?
  public let temperatureMinimumCelsius: [RookSDK.RookTemperature]?
  public let temperatureAvgCelsius: [RookSDK.RookTemperature]?
  public let temperatureMaxCelsius: [RookSDK.RookTemperature]?
  public let temperatureDeltaCelsius: [RookSDK.RookTemperature]?
  public let temperatureGranularDataCelsius: [RookSDK.RookTemperatureGranular]?
  public let uvExposureMax: Swift.Int?
  public let uvExposureAvg: Swift.Int?
  public let uvExposureMin: Swift.Int?
  public let uvExposureSeconds: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookBloodGlucoseGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let bloodGlucoseMgPerDL: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookBloodPressureSystolicDiastolic : Swift.Encodable {
  public let systolicBp: Swift.Int, diastolicBp: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookBloodPressureGranularSystolicDiastolicBp : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let systolicBp: Swift.Int, diastolicBp: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookHydrationAmountGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, hydrationAmountMl: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookHydrationLevelGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, hydrationLevelPercentage: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookMoodGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let moodScale: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
extension RookSDK.RookEventsManager {
  @objc final public func syncEvents(date: Foundation.Date, eventType: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func syncPendingEventsObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func getTodayStepCount(completion: @escaping (Swift.Int, (any Swift.Error)?) -> Swift.Void)
  @objc final public func getTodayCalories(completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncBodyHeartRateEventObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncPhysicalHeartRateEventObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncBodyOxygenationEventObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncPhysicalOxygenationEventObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncTrainingEventObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncTemperatureEventsObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncPressureEventsObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncGlucoseEventsObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  @objc final public func syncBodyMetricsEventsObjc(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
}
public struct RookVelocityVectorItem : Swift.Encodable {
  public let speedMetersPerSecond: Swift.Int
  public let direction: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookTemperatureExtractionItem : Swift.Codable {
  public let temperatureCelsius: Swift.Int
  public let measurementType: Swift.String
  public init(temperatureCelsius: Swift.Int, measurementType: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookTemperatureGranularTransmissionDTO : Swift.Codable {
  public let temperatureCelsius: Swift.Int
  public let measurementType: Swift.String
  public let datetime: Foundation.Date
  public init(datetime: Foundation.Date, temperatureCelsius: Swift.Int, measurementType: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RookSDK.RookBackGroundSync {
  @objc dynamic public func enableBackGroundForEvents()
  @objc dynamic public func isBackGroundForEventsEnable() -> Swift.Bool
  @objc dynamic public func disableBackGroundForEvents()
}
@_inheritsConvenienceInitializers @objc final public class RookSummaryManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  final public func sync(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func sync(_ date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func sync(_ date: Foundation.Date, summaryType: [RookSDK.SummaryTypeToUpload], completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getSleepSummary(date: Foundation.Date, completion: @escaping (Swift.Result<[RookSDK.RookSleepSummary], any Swift.Error>) -> Swift.Void)
  final public func getPhysicalSummary(date: Foundation.Date, completion: @escaping (Swift.Result<RookSDK.RookPhysicalSummary, any Swift.Error>) -> Swift.Void)
  final public func getBodySummary(date: Foundation.Date, completion: @escaping (Swift.Result<RookSDK.RookBodySummary, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  @objc final public func syncSummaries(completion: @escaping () -> Swift.Void)
  @available(*, deprecated, renamed: "syncSummaries")
  @objc final public func syncYesterdaySummaries(completion: @escaping () -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncSleepSummary(from date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncPhysicalSummary(from date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncBodySummary(from date: Foundation.Date, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date)")
  final public func syncPendingSummaries(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func getSleepPendingDates() -> [Foundation.Date]
  final public func getPhysicalPendingDates() -> [Foundation.Date]
  final public func getBodyPendingDates() -> [Foundation.Date]
  final public func getLastSleepUploadedDate() -> Foundation.Date?
  final public func getLastPhysicalUploadedDate() -> Foundation.Date?
  final public func getLastBodyUploadedDate() -> Foundation.Date?
  @objc deinit
}
public struct RookVo2GranularDTO : Swift.Codable {
  public let datetime: Foundation.Date
  public let vo2MlPerMinPerKg: Swift.Int
  public init(datetime: Foundation.Date, vo2MlPerMinPerKg: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookCalories {
  public let activeCalories: Swift.Int?
  public let basalCalories: Swift.Int?
  public let totalCalories: Swift.Int?
}
public enum DataSourceRevoke : Swift.String, Swift.CaseIterable {
  case Garmin
  case Oura
  case Polar
  case Fitbit
  case Withings
  case Whoop
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RookSDK.DataSourceRevoke]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RookSDK.DataSourceRevoke] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct RookHrGranularTransmissionDTO : Swift.Codable {
  public let datetime: Foundation.Date
  public let hrBPM: Swift.Int
  public init(datetime: Foundation.Date, hrBPM: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class IOSClass : ObjectiveC.NSObject {
  @objc public static let shared: RookSDK.IOSClass
  @objc final public func test()
  @objc final public func disableTest()
  @objc final public func sendLog(with log: RookSDK.LogInfoObjc)
  @objc deinit
}
public enum BackGroundStorageTypes : Swift.String {
  case stepsBackGroundExtractionEnable
  case caloriesBackGroundExtractionEnable
  case heartRateBackGroundExtractionEnable
  case sleepBackGroundExtractionEnable
  case physicalBackGroundExtractionEnable
  case bodyBackGroundExtractionEnable
  case allSummariesBackGroundExtractionEnable
  case activityEventsBackGroundExtractionEnable
  case eventsBackGroundExtractionEnable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventNames : Swift.String {
  public static let errorBackGround: Swift.String
  case errorBackGroundEventName
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RookTorqueGranularItem : Swift.Encodable {
  public let datetime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let torqueNewtonMeters: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookSaturationGranularDTO : Swift.Codable {
  public let datetime: Foundation.Date
  public let saturationPercentage: Swift.Int
  public init(datetime: Foundation.Date, saturationPercentage: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookHrvRmssdGranularTransmissionDTO : Swift.Codable {
  public let datetime: Foundation.Date
  public let hrvRmssd: Swift.Int
  public init(datetime: Foundation.Date, hrvRmssd: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RookSDK.RookConnectPermissionsManager {
  final public func requestAllPermissions() async throws -> Swift.Bool
  final public func requestSleepPermissions() async throws -> Swift.Bool
  final public func requestUserInfoPermissions() async throws -> Swift.Bool
  final public func requestPhysicalPermissions() async throws -> Swift.Bool
  final public func requestBodyPermissions() async throws -> Swift.Bool
  final public func requestPermissions(_ permissions: [RookSDK.HealthDataType]?) async throws -> Swift.Bool
  final public func checkPermissionStatus(type: RookSDK.HealthDataType?) async -> RookSDK.PermissionStatus
}
public struct SummarySyncResponse {
  public var sleepResponse: Swift.Result<Swift.Bool, any Swift.Error>?
  public var physicalResponse: Swift.Result<Swift.Bool, any Swift.Error>?
  public var bodyResponse: Swift.Result<Swift.Bool, any Swift.Error>?
}
public enum SummaryTypeToUpload : Swift.String {
  case sleep
  case physical
  case body
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RookDataSource {
  public let name: Swift.String
  public let description: Swift.String
  public let imageUrl: Swift.String
  public let connected: Swift.Bool
  public let authorizationURL: Swift.String?
}
public class TransmissionBodyMetricsValues {
  public init()
  public func getLastBodyTransmission() -> (Swift.Float?, Swift.Float?)
  @objc deinit
}
public struct RookActivityLevelGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let activityLevel: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookCadenceGranularItem : Swift.Encodable {
  public let datetime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let cadenceRpm: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookSpeedGranularItem : Swift.Encodable {
  public let datetime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let speedMetersPerSecond: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPTask {
  case request
  case requestParameters(bodyParameters: RookSDK.Parameters?, urlParameters: RookSDK.Parameters?)
  case requestParametersAndHeaders(bodyParameters: RookSDK.Parameters?, urlParameters: RookSDK.Parameters?, additionalHeaders: RookSDK.HTTPHeaders?)
}
public enum TimeZoneErrors : Swift.String, Swift.Error {
  case timeZoneNotAvailable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension RookSDK.TimeZoneErrors : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ExtractionErrors : Swift.Error {
  case sleepDataEmpty
  case errorRequest(httpCode: Swift.Int)
  case badRequest
  case userNotFound
}
extension RookSDK.ExtractionErrors : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias NetworkRouterCompletion = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AnalyticsTransmissionConfigurator : ObjectiveC.NSObject {
  @objc public static let shared: RookSDK.AnalyticsTransmissionConfigurator
  final public func setPlatform(_ platform: RookSDK.AnalyticPlatform)
  @objc final public func setPlatformToReact()
  @objc deinit
}
public struct URLParameterEncoder : RookSDK.ParameterEncoder {
  public static func encode(urlRequest: inout Foundation.URLRequest, with parameters: RookSDK.Parameters) throws
}
public struct StatusDataSources {
  public let oura: Swift.Bool?
  public let polar: Swift.Bool?
  public let whoop: Swift.Bool?
  public let fitbit: Swift.Bool?
  public let garmin: Swift.Bool?
  public let withings: Swift.Bool?
  public let googleFit: Swift.Bool?
  public let appleHealth: Swift.Bool?
  public let healthConnect: Swift.Bool?
  public let android: Swift.Bool?
  public let dexcom: Swift.Bool?
}
public struct DataSourceStatus {
  public let source: Swift.String
  public let status: Swift.Bool
  public let imageURL: Foundation.URL
}
extension RookSDK.RookConnectPermissionsManager {
  @objc final public func requestAllPermissionsObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func requestSleepPermissionsObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func requestUserInfoPermissionsObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func requestPhysicalPermissionsObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func requestBodyPermissionsObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func checkPermissionStatus(type: Swift.String?) async -> Swift.String
  @objc final public func requestPermissions(_ permissions: [Swift.String]?, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
}
extension RookSDK.RookSummaryManager {
  @objc final public func sync(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func sync(date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func sync(date: Foundation.Date, summaryType: [Swift.String], completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  @objc final public func syncSleepSummaryObjc(form date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  @objc final public func syncPhysicalSummaryObjc(form date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  @objc final public func syncBodySummaryObjc(from date: Foundation.Date, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  @objc final public func syncPendingSummariesObjc(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc final public class RookConnectPermissionsManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  final public func requestAllPermissions(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func requestSleepPermissions(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func requestUserInfoPermissions(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func requestPhysicalPermissions(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func requestBodyPermissions(completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  final public func checkPermissionStatus(type: RookSDK.HealthDataType?, completion: @escaping (RookSDK.PermissionStatus) -> Swift.Void)
  final public func requestPermissions(_ permissions: [RookSDK.HealthDataType]?, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum PermissionStatus : Swift.String {
  case permissionNotRequested
  case permissionIndeterminate
  case permissionGranted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserTimeZone : Swift.Encodable {
  public let timeZone: Swift.String
  public let offset: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
extension RookSDK.RookConnectConfigurationManager {
  final public func initRook() async throws -> Swift.Bool
  final public func updateUserId(_ id: Swift.String) async throws -> Swift.Bool
  final public func getUserId() async throws -> Swift.String
  final public func clearUser() async throws -> Swift.Bool
  final public func removeUserFromRook() async throws -> Swift.Bool
  final public func syncUserTimeZone() async throws -> Swift.Bool
}
extension RookSDK.RookSummaryManager {
  final public func sync() async throws -> Swift.Bool
  final public func sync(_ date: Foundation.Date) async throws -> Swift.Bool
  final public func sync(_ date: Foundation.Date, _ summaryType: [RookSDK.SummaryTypeToUpload]) async throws -> Swift.Bool
  final public func getSleepSummary(date: Foundation.Date) async throws -> [RookSDK.RookSleepSummary]
  final public func getPhysicalSummary(date: Foundation.Date) async throws -> RookSDK.RookPhysicalSummary
  final public func getBodySummary(date: Foundation.Date) async throws -> RookSDK.RookBodySummary
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncSummaries() async
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncSleepSummary(from date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncPhysicalSummary(from date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date) or sync(_ date: Date, _ summaryType: [SummaryType])")
  final public func syncBodySummary(from date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use sync(), sync(_ date: Date)")
  final public func syncPendingSummaries() async throws -> Swift.Bool
}
public struct RookSleepSummary : Swift.Encodable {
  public let datetime: Foundation.Date
  public let sourceOfData: Swift.String
  public let sleepHealthScore: Swift.Int?
  public let sleepStartDatetime: Foundation.Date, sleepEndDatetime: Foundation.Date, sleepDate: Foundation.Date
  public let sleepDurationSeconds: Swift.Int?, timeInBedSeconds: Swift.Int?, lightSleepDurationSeconds: Swift.Int?, remSleepDurationSeconds: Swift.Int?
  public let deepSleepDurationSeconds: Swift.Int?, timeToFallAsleepSeconds: Swift.Int?, timeAwakeDuringSleepSeconds: Swift.Int?, sleepQualityRating1_5_Score: Swift.Int?
  public let sleepEfficiency1_100_Score: Swift.Int?, sleepGoalSeconds: Swift.Int?, sleepContinuity1_5_Score: Swift.Int?, sleepContinuity1_5_Rating: Swift.Int?
  public let hrMaxBPM: Swift.Int?, hrMinimumBPM: Swift.Int?, hrAvgBPM: Swift.Int?, hrRestingBPM: Swift.Int?
  public let hrBasalBPM: Swift.Int?
  public let hrGranularDataBPM: [RookSDK.RookHearRateGranular]?
  public let hrvAvgRmssdNumber: Swift.Int?, hrvAvgSdnnNumber: Swift.Int?
  public let hrvSdnnGranularData: [RookSDK.RookHRVSDNNGranular]?
  public let hrvRmssdGranularData: [RookSDK.RookHRVRmssdGranular]?
  public let temperatureMinimumCelsius: [RookSDK.RookTemperature]?, temperatureAvgCelsius: [RookSDK.RookTemperature]?, temperatureMaxCelsius: [RookSDK.RookTemperature]?
  public let temperatureGranularDataCelsius: [RookSDK.RookTemperatureGranular]?
  public let temperatureDeltaCelsius: [RookSDK.RookTemperature]?
  public let breathsMinimumPerMin: Swift.Int?, breathsAvgPerMin: Swift.Int?, breathsMaxPerMin: Swift.Int?
  public let breathingGranularDataBreathsPerMin: [RookSDK.RookBreatingGranular]?
  public let snoringEventsCountNumber: Swift.Int?, snoringDurationTotalSeconds: Swift.Int?
  public let snoringGranularDataSnores: [RookSDK.RookSnoringGranular]?
  public let saturationAvgPercentage: Swift.Int?
  public let saturationGranularDataPercentage: [RookSDK.RookSaturationGranular]?
  public let saturationMinPercentage: Swift.Int?, saturationMaxPercentage: Swift.Int?
  public let apneaEvents: [RookSDK.RookApneaEvent]?
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookHearRateGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let hrBPM: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookHRVSDNNGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let hrvSDNN: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookHRVRmssdGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let hrvRmssd: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookTemperature : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookTemperatureGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let temperatureCelsius: Swift.Int
  public let measurementType: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookBreatingGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let breathsPerMin: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookSnoringGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let snoringEventsCountNumber: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookSaturationGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let saturationPercentage: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookApneaEvent : Swift.Encodable {
  public let startDate: Foundation.Date
  public let endDate: Foundation.Date
  public let duration: Swift.Double
  public let appleValue: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum RookTransmissionEventType : Swift.String, Swift.CaseIterable {
  case heartRateBodyEvent
  case heartRatePhysicalEvent
  case oxygenationBodyEvent
  case oxygenationPhysicalEvent
  case activityEvent
  case temperatureEvent
  case bloodGlucoseEvent
  case bloodPressureEvent
  case bodyMetricsEvent
  case stepsEvent
  case caloriesEvent
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RookSDK.RookTransmissionEventType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RookSDK.RookTransmissionEventType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct RookHrvSdnnGranularTransmisisonDTO : Swift.Codable {
  public let datetime: Foundation.Date
  public let hrvSdnn: Swift.Int
  public init(datetime: Foundation.Date, hrvSdnn: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookActivityEvent : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let sourcesOfData: Swift.String?
  public let activityStartTimeDateTime: Foundation.Date
  public let activityEndTimeDateTime: Foundation.Date
  public let activityDurationSeconds: Swift.Int?
  public let activityTypeName: Swift.String?
  public let activeSeconds: Swift.Int?
  public let restSeconds: Swift.Int?
  public let lowIntensitySeconds: Swift.Int?
  public let moderateIntensitySeconds: Swift.Int?
  public let vigorousIntensitySeconds: Swift.Int?
  public let inactivitySeconds: Swift.Int?
  public let activityLevelGranularDataNumber: [RookSDK.RookActivityLevelGranularData]?
  public let continuousInactivePeriodsNumber: Swift.Int?
  public let activityStrainLevelNumber: Swift.Int?
  public let activityWorkKilojoules: Swift.Int?
  public let activityEnergyKilojoules: Swift.Int?
  public let activityEnergyPlannedKilojoules: Swift.Int?
  public let caloriesNetIntakeKilocalories: Swift.Int?
  public let caloriesExpenditureKilocalories: Swift.Float?
  public let caloriesNetActiveKilocalories: Swift.Float?
  public let caloriesBasalMetabolicRateKilocalories: Swift.Float?
  public let fatPercentageOfCaloriesPercentage: Swift.Int?
  public let carbohydratePercentageOfCaloriesPercentage: Swift.Int?
  public let proteinPercentageOfCaloriesPercentage: Swift.Int?
  public let stepsNumber: Swift.Int?
  public let stepsGranularDataStepsPerMin: [RookSDK.RookStepsGranular]?
  public let walkedDistanceMeters: Swift.Int?, traveledDistanceMeters: Swift.Int?
  public let traveledDistanceGranularDataMeters: [RookSDK.RookTraveledDistanceGranular]?
  public let floorsClimbedNumber: Swift.Int?
  public let floorsClimbedGranularDataFloorsNumber: [RookSDK.RookFloorsClimbedGranular]?
  public let elevationAvgAltitudeMeters: Swift.Int?, elevationMinimumAltitudeMeters: Swift.Int?, elevationMaxAltitudeMeters: Swift.Int?, elevationLossActualAltitudeMeters: Swift.Int?
  public let elevationGainActualAltitudeMeters: Swift.Int?, elevationPlannedGainMeters: Swift.Int?
  public let elevationGranularDataMeters: [RookSDK.RookElevationGranular]?
  public let swimmingNumStrokesNumber: Swift.Int?, swimmingNumLapsNumber: Swift.Int?, swimmingPoolLengthMeters: Swift.Int?, swimmingTotalDistanceMeters: Swift.Int?
  public let swimmingDistanceGranularDataMeters: [RookSDK.RookSwimmingDistanceGranular]?
  public let hrMaxBPM: Swift.Int?, hrMinimumBPM: Swift.Int?, hrAvgBPM: Swift.Int?, hrRestingBPM: Swift.Int?
  public let hrGranularDataBPM: [RookSDK.RookHearRateGranular]?
  public let hrvAvgRmssdNumber: Swift.Int?, hrvAvgSdnnNumber: Swift.Int?
  public let hrvSdnnGranularDataNumber: [RookSDK.RookHRVSDNNGranular]?
  public let hrvRmssdGranularDataNumber: [RookSDK.RookHRVRmssdGranular]?
  public let speedNormalizedMetersPerSecond: Swift.Int?, speedAvgMetersPerSecond: Swift.Int?, speedMaxMetersPerSecond: Swift.Int?
  public let speedGranularDataMetersPerSecond: [RookSDK.RookSpeedGranular]?
  public let velocityVectorAvgSpeedAndDirection: [RookSDK.RookVelocityVectorSpeed]?, velocityVectorMaxSpeedAndDirection: [RookSDK.RookVelocityVectorSpeed]?
  public let paceAvgMinutesPerKilometer: Swift.Int?, paceMaxMinutesPerKilometer: Swift.Int?, cadenceAvgRPM: Swift.Int?, cadenceMaxRPM: Swift.Int?
  public let cadenceGranularDataRPM: [RookSDK.RookCadenceGranular]?
  public let torqueAvgNewtonMeters: Swift.Int?, torqueMaxNewtonMeters: Swift.Int?
  public let torqueGranularDataNewtonMeters: [RookSDK.RookTorqueGranular]?
  public let lapGranularDataLapsNumber: [RookSDK.RookLapGranular]?
  public let powerAvgWattsNumber: Swift.Int?, powerMaxWattsNumber: Swift.Int?
  public let powerGranularDataWattsNumber: [RookSDK.RookPowerGranular]?
  public let positionStartLatLngDeg: [RookSDK.RookPositionLatLng]?, positionCentroidLatLngDeg: [RookSDK.RookPositionLatLng]?, positionEndLatLngDeg: [RookSDK.RookPositionLatLng]?
  public let positionGranularDataLatLngDeg: [RookSDK.RookPositionGranular]?
  public let positionPolylineMapDataSummaryString: Swift.String?
  public let saturationAvgPercentage: Swift.Int?
  public let saturationGranularDataPercentage: [RookSDK.RookSaturationGranular]?
  public let vo2MaxMlPerMinPerKg: Swift.Int?
  public let vo2GranularDataMlPerMin: [RookSDK.RookVo2Granular]?
  public let stressAtRESTDurationSeconds: Swift.Int?, stressDurationSeconds: Swift.Int?, lowStressDurationSeconds: Swift.Int?, mediumStressDurationSeconds: Swift.Int?
  public let highStressDurationSeconds: Swift.Int?
  public let tssGranularData1_500_ScoreNumber: [RookSDK.RookTssGranular]?
  public let stressAvgLevelNumber: Swift.Int?, stressMaxLevelNumber: Swift.Int?
  public let appleWorkoutIdentifier: Swift.String
  public let appleDistanceCyclingMeters: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookSpeedGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, speedMetersPerSecond: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookVelocityVectorSpeed : Swift.Encodable {
  public let speedMetersPerSecond: Swift.Int
  public let direction: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookCadenceGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, cadenceRPM: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookTorqueGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, torqueNewtonMeters: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookLapGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, laps: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookPowerGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, powerWatts: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookPositionLatLng : Swift.Encodable {
  public let lat: Swift.Double, lng: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookPositionGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let lat: Swift.Double, lng: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RookTssGranular : Swift.Encodable {
  public let dateTime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int, tss1_500_Score: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public class TransmissionLocalDataSource {
  public init()
  @objc deinit
}
public struct RookUserInfoData : Swift.Codable {
  public var metaData: RookSDK.RookUserInfoMetaData?
  public var userInformation: RookSDK.RookUserInformation?
  public var userBodyMetrics: RookSDK.RookUserBodyMetrics?
  public func getDictionary() -> [Swift.String : Any]
  public func getData() -> Foundation.Data?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookUserInfoMetaData : Swift.Codable {
  public var datetime: Foundation.Date
  public var userID: Swift.String?
  public var sourceOfData: [Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookUserInformation : Swift.Codable {
  public var sex: Swift.String?
  public var gender: Swift.String?
  public var dateOfBirth: Foundation.Date?
  public var country: Swift.String?
  public var state: Swift.String?
  public var city: Swift.String?
  public var ethnicity: Swift.String?
  public var income: Swift.Double?
  public var maritalStatus: Swift.String?
  public var timeZone: Swift.Int?
  public var education: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RookUserBodyMetrics : Swift.Codable {
  public var height: Swift.Int?
  public var weight: Swift.Int?
  public var dateOfBirth: Foundation.Date?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension RookSDK.RookEventsManager {
  final public func syncEvents() async
  final public func syncEvents(date: Foundation.Date, eventType: RookSDK.EventTypeToUpload) async throws -> Swift.Bool
  final public func getActivityEvents(date: Foundation.Date) async throws -> [RookSDK.RookActivityEvent]
  final public func getTodayStepCount() async throws -> Swift.Int
  final public func getTodayCalories() async throws -> RookSDK.RookCalories
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBodyHeartRateEvent(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncPhysicalHeartRateEvent(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBodyOxygenationEvent(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncPhysicalOxygenationEvent(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncTrainingEvent(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncTemperatureEvents(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBloodPressureEvents(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBloodGlucoseEvents(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncBodyMetricsEvents(date: Foundation.Date) async throws -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed; please use syncEvents(date: Date, eventType: EventTypeToUpload)")
  final public func syncPendingEvents() async throws -> Swift.Bool
}
@objc public class LogInfoObjc : ObjectiveC.NSObject {
  public init(level: Swift.String?, dataDateTime: Swift.String?, action: Swift.String?, dataType: Swift.String?, extra: Swift.String?, uuid: Swift.String)
  @objc deinit
}
public enum EventTypeToUpload : Swift.String {
  case activityEvent
  case heartRate
  case oxygenation
  case temperature
  case bloodPressure
  case bloodGlucose
  case bodyMetrics
  case calories
  case steps
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class RookConnectConfigurationManagerObjc : ObjectiveC.NSObject {
  @objc public static let shared: RookSDK.RookConnectConfigurationManagerObjc
  @objc final public func setConfiguration(clientUUID: Swift.String, secretKey: Swift.String, enableBackgroundSync: Swift.Bool, enableEventsBackgroundSync: Swift.Bool)
  @objc final public func setEnvironmentForSandbox()
  @objc final public func setEnvironmentForProduction()
  @objc final public func initRook()
  @objc final public func updateUserId(_ id: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func readUserId(completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func clearUser(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func removeUserFromRook(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func syncUserTimeZone(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, renamed: "enableSync")
  @objc final public func enableYesterdaySync()
  @objc final public func enableSync()
  @available(*, deprecated, renamed: "disableSync")
  @objc final public func disableYesterdaySync()
  @objc final public func disableSync()
  @available(*, deprecated, renamed: "isSyncEnable")
  @objc final public func isYesterdaySyncEnable() -> Swift.Bool
  @objc final public func isSyncEnable() -> Swift.Bool
  @objc final public func setConsoleLogAvailable(_ value: Swift.Bool)
  @objc deinit
}
public enum RookEventType {
  case steps
  case heartRate
  case oxygenation
  case workout
  case bloodPressure
  case bloodGlucose
  case temperature
  case bodyMetrics
  case calories
  public static func == (a: RookSDK.RookEventType, b: RookSDK.RookEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BackgroundSummaryType {
  case sleep
  case body
  case physical
  public static func == (a: RookSDK.BackgroundSummaryType, b: RookSDK.BackgroundSummaryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RookPositionGranularItem : Swift.Encodable {
  public let datetime: Foundation.Date
  public let intervalDurationSeconds: Swift.Int
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc final public class DataSourceManagerObjc : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @available(*, deprecated, message: "This method is deprecated and it will be removed in a future version")
  @objc final public func getAvailableDataSources(redirectURL: Swift.String?, completion: @escaping ([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "This method is deprecated and it will be removed in a future version")
  @objc final public func presentDataSourceView(redirectURL: Swift.String?, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc final public func getDataSourceAuthorizer(dataSource: Swift.String, redirectUrl: Swift.String? = nil, completion: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func getAuthorizedDataSources(completion: @escaping ([[Swift.String : Any]]?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public struct DataSourceAuthorizer {
  public let dataSource: Swift.String
  public let authorized: Swift.Bool
  public let authorizationURL: Foundation.URL?
}
public enum RookTransmissionSummaryType : Swift.String, Swift.CaseIterable {
  case sleep
  case physical
  case body
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RookSDK.RookTransmissionSummaryType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RookSDK.RookTransmissionSummaryType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalyticPlatform {
  case ios
  case flutter
  case reactNative
  case capacitor
  public static func == (a: RookSDK.AnalyticPlatform, b: RookSDK.AnalyticPlatform) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AnalyticsExtractionConfigurator : ObjectiveC.NSObject {
  @objc public static let shared: RookSDK.AnalyticsExtractionConfigurator
  final public func setPlatform(_ platform: RookSDK.AnalyticPlatform)
  @objc final public func setPlatformToReact()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class RookBackGroundSync : ObjectiveC.NSObject {
  @objc public static let shared: RookSDK.RookBackGroundSync
  @objc public var handleSummariesUploaded: (() -> Swift.Void)?
  @objc public var handleActivityEventsUploaded: (() -> Swift.Void)?
  public var handleEventsUploaded: ((RookSDK.RookEventType) -> Swift.Void)?
  public var handleSummariesBackProcess: ((RookSDK.BackgroundSummaryType) -> Swift.Void)?
  public var handleErrorObserverQuery: ((any Swift.Error) -> Swift.Void)?
  @objc public func setBackListeners()
  @objc public func enableBackGroundForSummaries()
  @objc public func disableBackGroundForSummaries()
  @objc public func isBackGroundForSummariesEnable() -> Swift.Bool
  @objc deinit
}
public enum RookConnectErrors : Swift.Error {
  case emptySummary
  case emptySummaries
  case emptyEvent
  case nothingToUpdate
  case missingConfiguration
  public static func == (a: RookSDK.RookConnectErrors, b: RookSDK.RookConnectErrors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RookSDK.RookConnectErrors : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct RookBreathingGranularBreathsPerMinTransmissionDTO {
  public init(datetime: Foundation.Date, breathsPerMin: Swift.Int)
}
public enum RookEnvironment {
  case sandbox
  case production
  public static func == (a: RookSDK.RookEnvironment, b: RookSDK.RookEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PendingDatesToUploadTypes : Swift.String {
  case sleepSummaryDates
  case physicalSummaryDates
  case bodySummaryDates
  case heartRateBodyEvent
  case heartRatePhysicalEvent
  case oxygenationBodyEvent
  case oxygenationPhysicalEvent
  case activityEvent
  case temperatureEvent
  case bloodGlucoseEvent
  case bloodPressureEvent
  case bodyMetricsEvent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HealthDataType : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: RookSDK.HealthDataType {
    get
  }
  case appleExerciseTime
  case appleMoveTime
  case appleStandTime
  case basalEnergyBurned
  case activeEnergyBurned
  case stepCount
  case distanceCycling
  case distanceWalkingRunning
  case distanceSwimming
  case swimmingStrokeCount
  case flightsClimbed
  case walkingSpeed
  case walkingStepLength
  case runningPower
  case runningSpeed
  case height
  case bodyMass
  case bodyMassIndex
  case waistCircumference
  case bodyFatPercentage
  case bodyTemperature
  case basalBodyTemperature
  case appleSleepingWristTemperature
  case heartRate
  case restingHeartRate
  case walkingHeartRateAverage
  case heartRateVariabilitySDNN
  case electrocardiogram
  case workout
  case workoutRoute
  case sleepAnalysis
  case sleepApneaEvent
  case vo2Max
  case oxygenSaturation
  case respiratoryRate
  case uvExposure
  case biologicalSex
  case dateOfBirth
  case bloodPressureSystolic
  case bloodPressureDiastolic
  case bloodGlucose
  case dietaryEnergyConsumed
  case dietaryProtein
  case dietarySugar
  case dietaryFatTotal
  case dietaryCarbohydrates
  case dietaryFiber
  case dietarySodium
  case dietaryCholesterol
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RookSDK.HealthDataType]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = RookSDK.HealthDataType
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RookSDK.HealthDataType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct RookNutritionEventData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RookSDK.RookDataType : Swift.Equatable {}
extension RookSDK.RookDataType : Swift.Hashable {}
extension RookSDK.RookDataType : Swift.RawRepresentable {}
extension RookSDK.RookContextType : Swift.Equatable {}
extension RookSDK.RookContextType : Swift.Hashable {}
extension RookSDK.NetworkResponse : Swift.Equatable {}
extension RookSDK.NetworkResponse : Swift.Hashable {}
extension RookSDK.NetworkResponse : Swift.RawRepresentable {}
extension RookSDK.RookTransmissionError : Swift.Equatable {}
extension RookSDK.RookTransmissionError : Swift.Hashable {}
extension RookSDK.RookTransmissionError : Swift.RawRepresentable {}
extension RookSDK.DataSourceRevoke : Swift.Equatable {}
extension RookSDK.DataSourceRevoke : Swift.Hashable {}
extension RookSDK.DataSourceRevoke : Swift.RawRepresentable {}
extension RookSDK.BackGroundStorageTypes : Swift.Equatable {}
extension RookSDK.BackGroundStorageTypes : Swift.Hashable {}
extension RookSDK.BackGroundStorageTypes : Swift.RawRepresentable {}
extension RookSDK.EventNames : Swift.Equatable {}
extension RookSDK.EventNames : Swift.Hashable {}
extension RookSDK.EventNames : Swift.RawRepresentable {}
extension RookSDK.SummaryTypeToUpload : Swift.Equatable {}
extension RookSDK.SummaryTypeToUpload : Swift.Hashable {}
extension RookSDK.SummaryTypeToUpload : Swift.RawRepresentable {}
extension RookSDK.TimeZoneErrors : Swift.Equatable {}
extension RookSDK.TimeZoneErrors : Swift.Hashable {}
extension RookSDK.TimeZoneErrors : Swift.RawRepresentable {}
extension RookSDK.PermissionStatus : Swift.Equatable {}
extension RookSDK.PermissionStatus : Swift.Hashable {}
extension RookSDK.PermissionStatus : Swift.RawRepresentable {}
extension RookSDK.RookTransmissionEventType : Swift.Equatable {}
extension RookSDK.RookTransmissionEventType : Swift.Hashable {}
extension RookSDK.RookTransmissionEventType : Swift.RawRepresentable {}
extension RookSDK.HTTPMethod : Swift.Equatable {}
extension RookSDK.HTTPMethod : Swift.Hashable {}
extension RookSDK.HTTPMethod : Swift.RawRepresentable {}
extension RookSDK.EventTypeToUpload : Swift.Equatable {}
extension RookSDK.EventTypeToUpload : Swift.Hashable {}
extension RookSDK.EventTypeToUpload : Swift.RawRepresentable {}
extension RookSDK.RookEventType : Swift.Equatable {}
extension RookSDK.RookEventType : Swift.Hashable {}
extension RookSDK.BackgroundSummaryType : Swift.Equatable {}
extension RookSDK.BackgroundSummaryType : Swift.Hashable {}
extension RookSDK.RookTransmissionSummaryType : Swift.Equatable {}
extension RookSDK.RookTransmissionSummaryType : Swift.Hashable {}
extension RookSDK.RookTransmissionSummaryType : Swift.RawRepresentable {}
extension RookSDK.AnalyticPlatform : Swift.Equatable {}
extension RookSDK.AnalyticPlatform : Swift.Hashable {}
extension RookSDK.RookConnectErrors : Swift.Equatable {}
extension RookSDK.RookConnectErrors : Swift.Hashable {}
extension RookSDK.RookEnvironment : Swift.Equatable {}
extension RookSDK.RookEnvironment : Swift.Hashable {}
extension RookSDK.PendingDatesToUploadTypes : Swift.Equatable {}
extension RookSDK.PendingDatesToUploadTypes : Swift.Hashable {}
extension RookSDK.PendingDatesToUploadTypes : Swift.RawRepresentable {}
extension RookSDK.HealthDataType : Swift.Equatable {}
extension RookSDK.HealthDataType : Swift.Hashable {}
extension RookSDK.HealthDataType : Swift.RawRepresentable {}
